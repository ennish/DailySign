<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--多属性文件时有以下有以下两种方式-->
    <!--1. 在每个context 设置 ignore-unresolvable="true" -->
    <!--<context:property-placeholder-->
            <!--location="classpath:config/jdbc.properties"/>-->
    <!--<context:property-placeholder-->
            <!--location="classpath:config/redis.properties"/>-->
    <!--<context:property-placeholder-->
            <!--location="classpath:config/WxMiniApp.properties"  ignore-unresolvable="true"/>-->
    <!--2. locations属性 引入属性文件 -->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />-->
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                <value>classpath:config/WxMiniApp.properties</value>
                <value>classpath:config/jdbc.properties</value>
                <value>classpath:config/redis.properties</value>
            </list>
        </property>
    </bean>
    <!--wx-java-miniapp 工具库，jdk1.7+ -->
    <!--weixin miniapp-->
    <!--<bean id="wxMaConfig" class="cn.binarywang.wx.miniapp.config.WxMaInMemoryConfig" >-->
    <!--<property name="appid" value="${wechat.miniapp.appid}"/>-->
    <!--<property name="aesKey" value="${wechat.miniapp.aesKey}"/>-->
    <!--<property name="secret" value="${wechat.miniapp.secret}"/>-->
    <!--<property name="token" value="${wechat.miniapp.token}"/>-->
    <!--<property name="msgDataFormat" value="${wechat.miniapp.msgDataFormat}"/>-->
    <!--</bean>-->
    <!--<bean id="wxMaService" class="cn.binarywang.wx.miniapp.api.impl.WxMaServiceImpl">-->
    <!--<property name="wxMaConfig" ref="wxMaConfig"/>-->
    <!--</bean>-->
    <bean id="wxConfig" class="com.enn.DTO.InternalWxConfig">
        <property name="appid" value="${wechat.miniapp.appid}"/>
        <!--<property name="aesKey" value="${wechat.miniapp.aesKey}"/>-->
        <property name="secret" value="${wechat.miniapp.secret}"/>
        <!--<property name="token" value="${wechat.miniapp.token}"/>-->
        <property name="msgDataFormat" value="${wechat.miniapp.msgDataFormat}"/>
    </bean>
    <bean id="wxExtraService" class="com.enn.service.impl.WxExtraServiceImpl">
        <property name="wxConfig" ref="wxConfig"/>
    </bean>

    <!-- 导入redis的配置文件 -->
    <import resource="config/redis-config.xml"/>
    <import resource="config/datasource.xml"/>

    <!-- 自动扫描(自动注入) -->
    <!--<context:component-scan base-package="com.enn.service"/>-->

    <!-- 定义事务管理器 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <context:component-scan base-package="com.enn.service">
        <context:include-filter type="regex" expression="com.enn.service.WxExtraServiceImplxtraService"/>
    </context:component-scan>
    <!-- 开启事务注解驱动 -->
    <tx:annotation-driven/>
    <!-- 配置事务特性 ，配置add、delete和update开始的方法(切面)，事务传播特性为required -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="init*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置那些类的方法进行事务管理 -->
    <aop:config>
        <aop:pointcut id="allManagerMethod" expression="execution (* com.enn.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="allManagerMethod"/>
    </aop:config>

    <!--mybatis-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:/config/mybatis-config.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 使用纯mybatis 或 mapper插件-->
    <!-- mybatis -->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--<property name="basePackage" value="com.enn.mapper" />-->
    <!--</bean>-->
    <!--tk.mybatis mapper-->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.enn.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
            </value>
        </property>
    </bean>

    <!--拦截器-->
    <!--<mvc:interceptors>-->
    <!--<mvc:interceptor>-->
    <!--<mvc:mapping path="/**"/>-->
    <!--<mvc:exclude-mapping path="/user/login"/>-->
    <!--<bean class="com.enn.interceptor.LoginInterceptor"/>-->
    <!--</mvc:interceptor>-->
    <!--</mvc:interceptors>-->
</beans>